plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

// Default debug keystore info
def keyAliasDefault = 'androiddebugkey'
def keyPasswordDefault = 'android'
def storePasswordDefault = 'android'
def storeFileDefault = 'keystores/keystore-debug.jks'

// Load a specific properties file to access the keystore if exists
def keystoreProperties = new Properties()
def keystorePropertiesFile = file('../key.properties')
if (keystorePropertiesFile.exists()) {
    println "Apply key.properties file"
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    // Load keystore properties from environment or set their default values
    println "key.properties file was not found. Use env or default value instead."
    def env = System.getenv()
    if (env['ANDROID_KEY_ALIAS']) keystoreProperties.put('keyAlias', env['ANDROID_KEY_ALIAS'])
    else keystoreProperties.put('keyAlias', keyAliasDefault)
    if (env['ANDROID_KEY_PASSWORD']) keystoreProperties.put('keyPassword', env['ANDROID_KEY_PASSWORD'])
    else keystoreProperties.put('keyPassword', keyPasswordDefault)
    if (env['ANDROID_STORE_PASSWORD']) keystoreProperties.put('storePassword', env['ANDROID_STORE_PASSWORD'])
    else keystoreProperties.put('storePassword', storePasswordDefault)
    if (env['ANDROID_STORE_FILE']) keystoreProperties.put('storeFile', env['ANDROID_STORE_FILE'])
    else keystoreProperties.put('storeFile', storeFileDefault)
}

// Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
def appId = 'com.nhancv.nft'

android {
    namespace = appId
    compileSdkVersion = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = appId
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        debug {
            keyAlias = keyAliasDefault
            keyPassword = keyPasswordDefault
            storePassword = storePasswordDefault
            storeFile = file(storeFileDefault)
        }
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storePassword = keystoreProperties['storePassword']
            storeFile = file(keystoreProperties['storeFile'])
        }
    }

    buildTypes {
        debug {
            debuggable = true
            signingConfig = signingConfigs.debug
        }
        release {
            debuggable = false
            minifyEnabled = true
            proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro']
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}
